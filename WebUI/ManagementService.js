//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./collector_types');
//HELPER FUNCTIONS AND STRUCTURES

var ManagementService_queryLogs_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
ManagementService_queryLogs_args.prototype = {};
ManagementService_queryLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.LogsQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_queryLogs_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_queryLogs_args');
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_queryLogs_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_queryLogs_result.prototype = {};
ManagementService_queryLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.LogMessage();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_queryLogs_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_queryLogs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_query_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
ManagementService_query_args.prototype = {};
ManagementService_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.TimeSeriesQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_query_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_query_args');
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_query_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_query_result.prototype = {};
ManagementService_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.TransferableTimeSeriesPoint();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_query_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_query_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_fetchSensor_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagementService_fetchSensor_args.prototype = {};
ManagementService_fetchSensor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_fetchSensor_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_fetchSensor_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_fetchSensor_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_fetchSensor_result.prototype = {};
ManagementService_fetchSensor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_fetchSensor_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_fetchSensor_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_sensorHash_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagementService_sensorHash_args.prototype = {};
ManagementService_sensorHash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_sensorHash_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_sensorHash_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_sensorHash_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_sensorHash_result.prototype = {};
ManagementService_sensorHash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_sensorHash_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_sensorHash_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_deploySensor_args = function(args) {
  this.name = null;
  this.file = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.file !== undefined) {
      this.file = args.file;
    }
  }
};
ManagementService_deploySensor_args.prototype = {};
ManagementService_deploySensor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_deploySensor_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_deploySensor_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.file) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_deploySensor_result = function(args) {
};
ManagementService_deploySensor_result.prototype = {};
ManagementService_deploySensor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_deploySensor_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_deploySensor_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getAllSensors_args = function(args) {
};
ManagementService_getAllSensors_args.prototype = {};
ManagementService_getAllSensors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getAllSensors_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getAllSensors_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getAllSensors_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getAllSensors_result.prototype = {};
ManagementService_getAllSensors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readSetBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readString();
          this.success.push(elem86);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getAllSensors_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getAllSensors_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        output.writeString(iter87);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_hasBinary_args = function(args) {
  this.sensor = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
  }
};
ManagementService_hasBinary_args.prototype = {};
ManagementService_hasBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_hasBinary_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_hasBinary_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_hasBinary_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_hasBinary_result.prototype = {};
ManagementService_hasBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_hasBinary_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_hasBinary_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorLabels_args = function(args) {
  this.sensor = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
  }
};
ManagementService_getSensorLabels_args.prototype = {};
ManagementService_getSensorLabels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorLabels_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorLabels_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorLabels_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getSensorLabels_result.prototype = {};
ManagementService_getSensorLabels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readSetBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.success.push(elem94);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorLabels_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorLabels_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        output.writeString(iter95);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_delSensor_args = function(args) {
  this.sensor = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
  }
};
ManagementService_delSensor_args.prototype = {};
ManagementService_delSensor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_delSensor_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_delSensor_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_delSensor_result = function(args) {
};
ManagementService_delSensor_result.prototype = {};
ManagementService_delSensor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_delSensor_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_delSensor_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensorLabels_args = function(args) {
  this.sensor = null;
  this.labels = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.labels !== undefined) {
      this.labels = args.labels;
    }
  }
};
ManagementService_setSensorLabels_args.prototype = {};
ManagementService_setSensorLabels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size96 = 0;
        var _rtmp3100;
        this.labels = [];
        var _etype99 = 0;
        _rtmp3100 = input.readSetBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString();
          this.labels.push(elem102);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensorLabels_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensorLabels_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  if (this.labels) {
    output.writeFieldBegin('labels', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter103 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter103))
      {
        iter103 = this.labels[iter103];
        output.writeString(iter103);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensorLabels_result = function(args) {
};
ManagementService_setSensorLabels_result.prototype = {};
ManagementService_setSensorLabels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensorLabels_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensorLabels_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensorConfiguration_args = function(args) {
  this.sensor = null;
  this.configuration = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.configuration !== undefined) {
      this.configuration = args.configuration;
    }
  }
};
ManagementService_setSensorConfiguration_args.prototype = {};
ManagementService_setSensorConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.configuration = new ttypes.SensorConfiguration();
        this.configuration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensorConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensorConfiguration_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  if (this.configuration) {
    output.writeFieldBegin('configuration', Thrift.Type.STRUCT, 2);
    this.configuration.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensorConfiguration_result = function(args) {
};
ManagementService_setSensorConfiguration_result.prototype = {};
ManagementService_setSensorConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensorConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensorConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorConfiguration_args = function(args) {
  this.sensor = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
  }
};
ManagementService_getSensorConfiguration_args.prototype = {};
ManagementService_getSensorConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorConfiguration_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getSensorConfiguration_result.prototype = {};
ManagementService_getSensorConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SensorConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorConfiguration_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorNames_args = function(args) {
};
ManagementService_getSensorNames_args.prototype = {};
ManagementService_getSensorNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorNames_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensorNames_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getSensorNames_result.prototype = {};
ManagementService_getSensorNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readSetBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.success.push(elem110);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensorNames_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensorNames_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        output.writeString(iter111);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_updateSensorConfiguration_args = function(args) {
  this.sensor = null;
  this.configuration = null;
  this.labels = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.configuration !== undefined) {
      this.configuration = args.configuration;
    }
    if (args.labels !== undefined) {
      this.labels = args.labels;
    }
  }
};
ManagementService_updateSensorConfiguration_args.prototype = {};
ManagementService_updateSensorConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.configuration = new ttypes.SensorConfiguration();
        this.configuration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size112 = 0;
        var _rtmp3116;
        this.labels = [];
        var _etype115 = 0;
        _rtmp3116 = input.readSetBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString();
          this.labels.push(elem118);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_updateSensorConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_updateSensorConfiguration_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  if (this.configuration) {
    output.writeFieldBegin('configuration', Thrift.Type.STRUCT, 2);
    this.configuration.write(output);
    output.writeFieldEnd();
  }
  if (this.labels) {
    output.writeFieldBegin('labels', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter119 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter119))
      {
        iter119 = this.labels[iter119];
        output.writeString(iter119);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_updateSensorConfiguration_result = function(args) {
};
ManagementService_updateSensorConfiguration_result.prototype = {};
ManagementService_updateSensorConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_updateSensorConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_updateSensorConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_addHost_args = function(args) {
  this.hostname = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_addHost_args.prototype = {};
ManagementService_addHost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_addHost_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_addHost_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_addHost_result = function(args) {
};
ManagementService_addHost_result.prototype = {};
ManagementService_addHost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_addHost_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_addHost_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_addHostExtension_args = function(args) {
  this.hostname = null;
  this.virtualHostName = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
    if (args.virtualHostName !== undefined) {
      this.virtualHostName = args.virtualHostName;
    }
  }
};
ManagementService_addHostExtension_args.prototype = {};
ManagementService_addHostExtension_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.virtualHostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_addHostExtension_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_addHostExtension_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.virtualHostName) {
    output.writeFieldBegin('virtualHostName', Thrift.Type.STRING, 2);
    output.writeString(this.virtualHostName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_addHostExtension_result = function(args) {
};
ManagementService_addHostExtension_result.prototype = {};
ManagementService_addHostExtension_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_addHostExtension_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_addHostExtension_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getHostExtension_args = function(args) {
  this.hostname = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_getHostExtension_args.prototype = {};
ManagementService_getHostExtension_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getHostExtension_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getHostExtension_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getHostExtension_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getHostExtension_result.prototype = {};
ManagementService_getHostExtension_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getHostExtension_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getHostExtension_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getAllHosts_args = function(args) {
};
ManagementService_getAllHosts_args.prototype = {};
ManagementService_getAllHosts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getAllHosts_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getAllHosts_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getAllHosts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getAllHosts_result.prototype = {};
ManagementService_getAllHosts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readSetBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readString();
          this.success.push(elem126);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getAllHosts_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getAllHosts_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        output.writeString(iter127);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_delHost_args = function(args) {
  this.hostname = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_delHost_args.prototype = {};
ManagementService_delHost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_delHost_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_delHost_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_delHost_result = function(args) {
};
ManagementService_delHost_result.prototype = {};
ManagementService_delHost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_delHost_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_delHost_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setHostLabels_args = function(args) {
  this.hostname = null;
  this.labels = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
    if (args.labels !== undefined) {
      this.labels = args.labels;
    }
  }
};
ManagementService_setHostLabels_args.prototype = {};
ManagementService_setHostLabels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size128 = 0;
        var _rtmp3132;
        this.labels = [];
        var _etype131 = 0;
        _rtmp3132 = input.readSetBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString();
          this.labels.push(elem134);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setHostLabels_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setHostLabels_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.labels) {
    output.writeFieldBegin('labels', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter135 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter135))
      {
        iter135 = this.labels[iter135];
        output.writeString(iter135);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setHostLabels_result = function(args) {
};
ManagementService_setHostLabels_result.prototype = {};
ManagementService_setHostLabels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setHostLabels_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setHostLabels_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getLabels_args = function(args) {
  this.hostname = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_getLabels_args.prototype = {};
ManagementService_getLabels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getLabels_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getLabels_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getLabels_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getLabels_result.prototype = {};
ManagementService_getLabels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readSetBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString();
          this.success.push(elem142);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getLabels_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getLabels_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        output.writeString(iter143);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensor_args = function(args) {
  this.hostname = null;
  this.sensor = null;
  this.activate = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.activate !== undefined) {
      this.activate = args.activate;
    }
  }
};
ManagementService_setSensor_args.prototype = {};
ManagementService_setSensor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.activate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensor_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensor_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 2);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  if (this.activate) {
    output.writeFieldBegin('activate', Thrift.Type.BOOL, 3);
    output.writeBool(this.activate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_setSensor_result = function(args) {
};
ManagementService_setSensor_result.prototype = {};
ManagementService_setSensor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_setSensor_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_setSensor_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensors_args = function(args) {
  this.hostname = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_getSensors_args.prototype = {};
ManagementService_getSensors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensors_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensors_args');
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getSensors_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getSensors_result.prototype = {};
ManagementService_getSensors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size144 = 0;
        var _rtmp3148;
        this.success = [];
        var _etype147 = 0;
        _rtmp3148 = input.readSetBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readString();
          this.success.push(elem150);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getSensors_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getSensors_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter151 in this.success)
    {
      if (this.success.hasOwnProperty(iter151))
      {
        iter151 = this.success[iter151];
        output.writeString(iter151);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getBundledSensorConfiguration_args = function(args) {
  this.sensor = null;
  this.hostname = null;
  if (args) {
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
ManagementService_getBundledSensorConfiguration_args.prototype = {};
ManagementService_getBundledSensorConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sensor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getBundledSensorConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getBundledSensorConfiguration_args');
  if (this.sensor) {
    output.writeFieldBegin('sensor', Thrift.Type.STRING, 1);
    output.writeString(this.sensor);
    output.writeFieldEnd();
  }
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 2);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementService_getBundledSensorConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagementService_getBundledSensorConfiguration_result.prototype = {};
ManagementService_getBundledSensorConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BundledSensorConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagementService_getBundledSensorConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ManagementService_getBundledSensorConfiguration_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagementServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ManagementServiceClient.prototype = {};
ManagementServiceClient.prototype.queryLogs = function(query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryLogs(query);
};

ManagementServiceClient.prototype.send_queryLogs = function(query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryLogs', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_queryLogs_args();
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_queryLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_queryLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryLogs failed: unknown result');
};
ManagementServiceClient.prototype.query = function(query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_query(query);
};

ManagementServiceClient.prototype.send_query = function(query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_query_args();
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query failed: unknown result');
};
ManagementServiceClient.prototype.fetchSensor = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_fetchSensor(name);
};

ManagementServiceClient.prototype.send_fetchSensor = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchSensor', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_fetchSensor_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_fetchSensor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_fetchSensor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchSensor failed: unknown result');
};
ManagementServiceClient.prototype.sensorHash = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sensorHash(name);
};

ManagementServiceClient.prototype.send_sensorHash = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sensorHash', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_sensorHash_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_sensorHash = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_sensorHash_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sensorHash failed: unknown result');
};
ManagementServiceClient.prototype.deploySensor = function(name, file, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deploySensor(name, file);
};

ManagementServiceClient.prototype.send_deploySensor = function(name, file) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deploySensor', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_deploySensor_args();
  args.name = name;
  args.file = file;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_deploySensor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_deploySensor_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.getAllSensors = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getAllSensors();
};

ManagementServiceClient.prototype.send_getAllSensors = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllSensors', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getAllSensors_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getAllSensors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getAllSensors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllSensors failed: unknown result');
};
ManagementServiceClient.prototype.hasBinary = function(sensor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasBinary(sensor);
};

ManagementServiceClient.prototype.send_hasBinary = function(sensor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasBinary', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_hasBinary_args();
  args.sensor = sensor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_hasBinary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_hasBinary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasBinary failed: unknown result');
};
ManagementServiceClient.prototype.getSensorLabels = function(sensor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSensorLabels(sensor);
};

ManagementServiceClient.prototype.send_getSensorLabels = function(sensor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSensorLabels', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getSensorLabels_args();
  args.sensor = sensor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getSensorLabels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getSensorLabels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSensorLabels failed: unknown result');
};
ManagementServiceClient.prototype.delSensor = function(sensor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_delSensor(sensor);
};

ManagementServiceClient.prototype.send_delSensor = function(sensor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delSensor', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_delSensor_args();
  args.sensor = sensor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_delSensor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_delSensor_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.setSensorLabels = function(sensor, labels, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setSensorLabels(sensor, labels);
};

ManagementServiceClient.prototype.send_setSensorLabels = function(sensor, labels) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setSensorLabels', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_setSensorLabels_args();
  args.sensor = sensor;
  args.labels = labels;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_setSensorLabels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_setSensorLabels_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.setSensorConfiguration = function(sensor, configuration, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setSensorConfiguration(sensor, configuration);
};

ManagementServiceClient.prototype.send_setSensorConfiguration = function(sensor, configuration) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setSensorConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_setSensorConfiguration_args();
  args.sensor = sensor;
  args.configuration = configuration;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_setSensorConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_setSensorConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.getSensorConfiguration = function(sensor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSensorConfiguration(sensor);
};

ManagementServiceClient.prototype.send_getSensorConfiguration = function(sensor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSensorConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getSensorConfiguration_args();
  args.sensor = sensor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getSensorConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getSensorConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSensorConfiguration failed: unknown result');
};
ManagementServiceClient.prototype.getSensorNames = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSensorNames();
};

ManagementServiceClient.prototype.send_getSensorNames = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSensorNames', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getSensorNames_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getSensorNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getSensorNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSensorNames failed: unknown result');
};
ManagementServiceClient.prototype.updateSensorConfiguration = function(sensor, configuration, labels, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateSensorConfiguration(sensor, configuration, labels);
};

ManagementServiceClient.prototype.send_updateSensorConfiguration = function(sensor, configuration, labels) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSensorConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_updateSensorConfiguration_args();
  args.sensor = sensor;
  args.configuration = configuration;
  args.labels = labels;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_updateSensorConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_updateSensorConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.addHost = function(hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addHost(hostname);
};

ManagementServiceClient.prototype.send_addHost = function(hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addHost', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_addHost_args();
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_addHost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_addHost_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.addHostExtension = function(hostname, virtualHostName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addHostExtension(hostname, virtualHostName);
};

ManagementServiceClient.prototype.send_addHostExtension = function(hostname, virtualHostName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addHostExtension', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_addHostExtension_args();
  args.hostname = hostname;
  args.virtualHostName = virtualHostName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_addHostExtension = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_addHostExtension_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.getHostExtension = function(hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getHostExtension(hostname);
};

ManagementServiceClient.prototype.send_getHostExtension = function(hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getHostExtension', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getHostExtension_args();
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getHostExtension = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getHostExtension_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getHostExtension failed: unknown result');
};
ManagementServiceClient.prototype.getAllHosts = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getAllHosts();
};

ManagementServiceClient.prototype.send_getAllHosts = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllHosts', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getAllHosts_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getAllHosts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getAllHosts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllHosts failed: unknown result');
};
ManagementServiceClient.prototype.delHost = function(hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_delHost(hostname);
};

ManagementServiceClient.prototype.send_delHost = function(hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delHost', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_delHost_args();
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_delHost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_delHost_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.setHostLabels = function(hostname, labels, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setHostLabels(hostname, labels);
};

ManagementServiceClient.prototype.send_setHostLabels = function(hostname, labels) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setHostLabels', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_setHostLabels_args();
  args.hostname = hostname;
  args.labels = labels;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_setHostLabels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_setHostLabels_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.getLabels = function(hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLabels(hostname);
};

ManagementServiceClient.prototype.send_getLabels = function(hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLabels', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getLabels_args();
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getLabels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getLabels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLabels failed: unknown result');
};
ManagementServiceClient.prototype.setSensor = function(hostname, sensor, activate, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setSensor(hostname, sensor, activate);
};

ManagementServiceClient.prototype.send_setSensor = function(hostname, sensor, activate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setSensor', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_setSensor_args();
  args.hostname = hostname;
  args.sensor = sensor;
  args.activate = activate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_setSensor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_setSensor_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagementServiceClient.prototype.getSensors = function(hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSensors(hostname);
};

ManagementServiceClient.prototype.send_getSensors = function(hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSensors', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getSensors_args();
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getSensors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getSensors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSensors failed: unknown result');
};
ManagementServiceClient.prototype.getBundledSensorConfiguration = function(sensor, hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getBundledSensorConfiguration(sensor, hostname);
};

ManagementServiceClient.prototype.send_getBundledSensorConfiguration = function(sensor, hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBundledSensorConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagementService_getBundledSensorConfiguration_args();
  args.sensor = sensor;
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagementServiceClient.prototype.recv_getBundledSensorConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagementService_getBundledSensorConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBundledSensorConfiguration failed: unknown result');
};
var ManagementServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ManagementServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ManagementServiceProcessor.prototype.process_queryLogs = function(seqid, input, output) {
  var args = new ManagementService_queryLogs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_queryLogs_result();
  this._handler.queryLogs(args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("queryLogs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_query = function(seqid, input, output) {
  var args = new ManagementService_query_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_query_result();
  this._handler.query(args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_fetchSensor = function(seqid, input, output) {
  var args = new ManagementService_fetchSensor_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_fetchSensor_result();
  this._handler.fetchSensor(args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("fetchSensor", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_sensorHash = function(seqid, input, output) {
  var args = new ManagementService_sensorHash_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_sensorHash_result();
  this._handler.sensorHash(args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("sensorHash", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_deploySensor = function(seqid, input, output) {
  var args = new ManagementService_deploySensor_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_deploySensor_result();
  this._handler.deploySensor(args.name, args.file, function (success) {
    result.success = success;
    output.writeMessageBegin("deploySensor", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getAllSensors = function(seqid, input, output) {
  var args = new ManagementService_getAllSensors_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getAllSensors_result();
  this._handler.getAllSensors(function (success) {
    result.success = success;
    output.writeMessageBegin("getAllSensors", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_hasBinary = function(seqid, input, output) {
  var args = new ManagementService_hasBinary_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_hasBinary_result();
  this._handler.hasBinary(args.sensor, function (success) {
    result.success = success;
    output.writeMessageBegin("hasBinary", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getSensorLabels = function(seqid, input, output) {
  var args = new ManagementService_getSensorLabels_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getSensorLabels_result();
  this._handler.getSensorLabels(args.sensor, function (success) {
    result.success = success;
    output.writeMessageBegin("getSensorLabels", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_delSensor = function(seqid, input, output) {
  var args = new ManagementService_delSensor_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_delSensor_result();
  this._handler.delSensor(args.sensor, function (success) {
    result.success = success;
    output.writeMessageBegin("delSensor", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_setSensorLabels = function(seqid, input, output) {
  var args = new ManagementService_setSensorLabels_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_setSensorLabels_result();
  this._handler.setSensorLabels(args.sensor, args.labels, function (success) {
    result.success = success;
    output.writeMessageBegin("setSensorLabels", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_setSensorConfiguration = function(seqid, input, output) {
  var args = new ManagementService_setSensorConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_setSensorConfiguration_result();
  this._handler.setSensorConfiguration(args.sensor, args.configuration, function (success) {
    result.success = success;
    output.writeMessageBegin("setSensorConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getSensorConfiguration = function(seqid, input, output) {
  var args = new ManagementService_getSensorConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getSensorConfiguration_result();
  this._handler.getSensorConfiguration(args.sensor, function (success) {
    result.success = success;
    output.writeMessageBegin("getSensorConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getSensorNames = function(seqid, input, output) {
  var args = new ManagementService_getSensorNames_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getSensorNames_result();
  this._handler.getSensorNames(function (success) {
    result.success = success;
    output.writeMessageBegin("getSensorNames", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_updateSensorConfiguration = function(seqid, input, output) {
  var args = new ManagementService_updateSensorConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_updateSensorConfiguration_result();
  this._handler.updateSensorConfiguration(args.sensor, args.configuration, args.labels, function (success) {
    result.success = success;
    output.writeMessageBegin("updateSensorConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_addHost = function(seqid, input, output) {
  var args = new ManagementService_addHost_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_addHost_result();
  this._handler.addHost(args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("addHost", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_addHostExtension = function(seqid, input, output) {
  var args = new ManagementService_addHostExtension_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_addHostExtension_result();
  this._handler.addHostExtension(args.hostname, args.virtualHostName, function (success) {
    result.success = success;
    output.writeMessageBegin("addHostExtension", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getHostExtension = function(seqid, input, output) {
  var args = new ManagementService_getHostExtension_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getHostExtension_result();
  this._handler.getHostExtension(args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("getHostExtension", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getAllHosts = function(seqid, input, output) {
  var args = new ManagementService_getAllHosts_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getAllHosts_result();
  this._handler.getAllHosts(function (success) {
    result.success = success;
    output.writeMessageBegin("getAllHosts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_delHost = function(seqid, input, output) {
  var args = new ManagementService_delHost_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_delHost_result();
  this._handler.delHost(args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("delHost", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_setHostLabels = function(seqid, input, output) {
  var args = new ManagementService_setHostLabels_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_setHostLabels_result();
  this._handler.setHostLabels(args.hostname, args.labels, function (success) {
    result.success = success;
    output.writeMessageBegin("setHostLabels", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getLabels = function(seqid, input, output) {
  var args = new ManagementService_getLabels_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getLabels_result();
  this._handler.getLabels(args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("getLabels", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_setSensor = function(seqid, input, output) {
  var args = new ManagementService_setSensor_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_setSensor_result();
  this._handler.setSensor(args.hostname, args.sensor, args.activate, function (success) {
    result.success = success;
    output.writeMessageBegin("setSensor", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getSensors = function(seqid, input, output) {
  var args = new ManagementService_getSensors_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getSensors_result();
  this._handler.getSensors(args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("getSensors", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagementServiceProcessor.prototype.process_getBundledSensorConfiguration = function(seqid, input, output) {
  var args = new ManagementService_getBundledSensorConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagementService_getBundledSensorConfiguration_result();
  this._handler.getBundledSensorConfiguration(args.sensor, args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("getBundledSensorConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

