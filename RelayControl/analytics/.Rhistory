ar(1h)
ar(lh)
sunspot.ar = ar(sunspot.year)
predict(sunspot.ar, n.ahead=25)
fix(sunspot.ar)
ar(lh, FALSE, 4) # fit ar(4)
lh
(sunspot.ar <- ar(sunspot.year))
predict(sunspot.ar, n.ahead=25)
predict = ar([2,3,5,6,7,8,3,4,3,2])
predict = ar(a[2,3,5,6,7,8,3,4,3,2])
lh
p = ar(lh)
predict(p, n.ahead=22)
clear
cls
1:10
arr = 1:10
print arr
print (arr)
t = ts(arr, frequency=1, start=c(2011,2))
print(t)
ar(t, method="ols")
aa = ar(t, method="ols")
aa = ar(t)
predict(aa, n.ahead=10)
se
se
aa
data = a[2,3,5,2,3,3,5,4,6,5,6,7,2,2,34,345,35,34]
data = a[2,3,5,2,3,3,5,4,6,5,6,7,2,2,34,345,35,34]data
data = 1:10
print (data)
ema(data, n=3)
EMA(data, n=2)
data(ttrc)
SMA
help SMA
SMA(data, n=10)
install.packages("TTR")
SMA(data, n=10)
SMA
EMA(data)
library("TTR")
EMA(data)
EMA(data)
print(data)
EMA(data, n=2)
csv(pipe(''))
read.csv(pipe('D:\work\dev\sonar\sonar\Times\src\radapt.py SIS_142_cpu'))
read.csv(pipe('D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
data = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
print data
print (data)
clear
len(data)
length(data)
length(data[0])
View(data)
data
date$0
names(data)
data$X15
mean(data$x15)
mean(data$X15)
View(data)
View(data)
View(data)
View(data)
data[[0]]
data[[1]]
data[[2]]
data[[2]][0]
data[[2]][11]
data[[2]][112]
plot(data)
plot(data[[1]],data[[2]])
spec.pgram(data[[2]])
acf(data[[2]])
plot.acf(data[[2]])
acf(data[[2]], lag.max=100)
acf(data[[2]], lag.max=600)
acf(data[[2]], lag.max=1200)
spec.pgram(data[[2]], spans=4, log="no")
spec.pgram(data[[2]], spans=40, log="no")
spec.pgram(data[[2]], spans=400, log="no")
spec.pgram(data[[2]], spans=900, log="no")
spec.pgram(data[[2]], spans=900)
spec.pgram(data[[2]], spans=900, log="no")
plot.pergram(data[[2]])
pergram(data[[2]])
install.packages("plot")
library("manipulate")
install.packages("plotpc")
periodogram(data[[2]])
install.packages("TSA")
library("TSA")
periodogram(data[[2]])
periodogram(data[[2]], log='no')
periodogram(data[[2]], log='no', lwd=1)
length(data[[2]])
periodogram(data[[2]], log='no', lwd=1, plot='no')
res = periodogram(data[[2]], log='no', lwd=1, plot='no')
fix(res)
fix(res)
res.list
res.frequency
fix(res)
spec.freq
res.freq
res$freq
names(res)
res$series
res$bandwidth
names(res$freq)
res$spec
names(res)
order(res$freq)
res[order(res$freq)]
res[order(res$freq)]$spec
df2 = data.frame(c(res$freq,res$spec))
df2[order(df[[1]],df[[2]])]
df2[order(df2[[1]],df2[[2]])]
View(df2)
df2 = data.frame(res$freq,res$spec)
View(df2)
df2[order(df2[[1]],df2[[2]])]
df2[order(df2[[1]],df2[[2]])]
df2[order(df2$res.freq,df2$res.spec)]
df2$res.freq
df2[order(df2$res.spec),]
sorted = df2[order(df2$res.spec),]
View(sorted)
len(data)
length(data)
lengths(data[2,])
length(data[2,])
length(data[2])
length(data[[2])
length(data[[2]])
length(sorted)
length(sorted[[1]])
sorted[11200L,]
sorted[11200:,]
sorted[11200:11250,]
sorted[11245:11250,]
View(data)
view(data)
clear
cls
sis = read.csv(pipe('D:\work\dev\sonar\sonar\Times\src\radapt.py SIS_142_cpu'))
sis = read.csv(pipe('D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
sis = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
View(sis)
sis[[2]]
plot(sis[[2]])
sists = ts(sis[[2]])
sists
plot.ts(sists)
sists_log = log(sists)
plot.ts(sists_log)
library("TTR")
sists_sma = SMA(sists, n=5)
plot.ts(sists_sma)
sists_components = decompose(sists_sma)
sists_components = decompose(sists)
sists2 = ts(sis[[2]], frequency=5 minute)
sists2 = ts(sis[[2]], start=2000, frequency=12)
decompose(sists2)
sists2_dec = decompose(sists2)
plot(sists2_dec)
HoltWinters(sists, beta=False, gamma=False)
HoltWinters(sists, beta=FALSE, gamma=FALSE)
fc = HoltWinters(sists, beta=FALSE, gamma=FALSE)
fix(fc)
plot(fc$fitted)
plot(fc)
fc$SSE
library("forecast")
library("forecast")
install.packages("forecast")
library("forecast")
forecast.HoltWinters(fc, h=8)
plot(forecast.HoltWinters(fc, h=8))
plot(forecast.HoltWinters(fc, h=8)$Forecast)
forecast.HoltWinters(fc, h=8)$Forecast
fc2 = forecast.HoltWinters(fc, h=8)
plot.forecast(fc2)
plot(sists)
fc2 = forecast.HoltWinters(fc, h=10000)
fc2 = forecast.HoltWinters(fc, h=100)
plot.forecast(fc2)
fc2 = forecast.HoltWinters(fc, h=1000)
plot.forecast(fc2)
acf(sists)
fix(sists_sma)
sists[4]
names(sis)
sis$X15[33]
for(i in 1:10)
print i
for(i in 1:10) {}
print(i)
}
for(i in 1:10) { print(i)}
if(i==10) {print(i)}
if(i==10) {print(i)} else {print('no')}
if(i!=10) {print(i)} else {print('no')}
var(sists)
sd(sists)
mean(sists)
quantile(sists, c(0.9))
quantile(sists, c(0.9, 0.5))[2]
quantile(sists, c(0.9, 0.5))
qs = quantile(sists, c(0.9, 0.5))
fix(qs)
acf(sists, lag.max=200)
acf(sists, lag.max=2000)
acf(sists, lag.max=1000)
sis2 = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_145_cpu'))
sists = ts(sis2, frequency=12)
sists2 = ts(sis2, frequency=12)
sis1 = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
sists = ts(sis2, frequency=12)
data=c(sists, sists2)
fix(data)
stack(sists, sists2)
asdf = list(sists, sists2)
for(i in asf)  { plot(i)}
for(i in asdf)  { plot(i)}
fix(asdf)
for(i in asdf) {print(i)}
plot(sists)
plot(sists2)
a = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_142_cpu'))
b = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_145_cpu'))
a_ts = ts(a$X15, frequency=12)
b_ts = ts(b$X15, frequency=12)
b_ts = ts(b$X220, frequency=12)
asdf=list(a_ts,b_ts)
for(i in asdf) {plot(i)}
for(i in asdf) {acf(i, lag.max=1000)}
string="asdf"
print(string)
string += "test"
string = string +"test"
string = paste(string, string)
print(string)
string = paste(string, 22)
print(string)
string = paste(string, 22, sep="")
print(string)
clear
print(i)
print(a)
1:12
450:460
print(a)
#   b = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_145_cpu'))
print(test)
#   b = read.csv(pipe('python D:/work/dev/sonar/sonar/Times/src/radapt.py SIS_145_cpu'))
for(test in 145:150) {
print(i)
print(i)
print(i)
print(i)
print(i)
print(i)
print(i)
print(i)
}
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/.active-rstudio-document')
data_csv = list()
source('~/test.R')
fix(data_csv)
print(paste('loading: ', name)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fix(data_csv)
print(length(data_csv))
names(data.csv)
names(data_csv)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/test.R')
acf(list.ts[0])
acf(list.ts[1], max.lag=1000)
plot(acf(element, lag.max=1000))
plot(acf(element, lag.max=1000))
acf(element, lag.max=1000)
acf(list.ts[1], lag.max=1000)
fix(list.ts)
plot(list.ts[2])
plot(list.ts[[2]])
plot(list.ts[[2]])
plot(list.ts[[2]])
acf(list.ts[[2]], lag.max=1000)
acf(list.ts[[3]], lag.max=1000)
acf(list.ts[[4]], lag.max=1000)
acf(list.ts[[5]], lag.max=1000)
acf(data_csv[[5]][[2]], lag.max=1000)
data_csv[[3]]
data_csv[[3]][[2]]
acf(data_csv[[3]], lag.max=1000)
acf(data_csv[[2]], lag.max=1000)
acf(data_csv[[5]], lag.max=1000)
source('~/test.R')
source('~/test.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/test.R')
source('~/test.R')
source('~/test.R')
plot(list.ts[[5]])
plot(list.ts[[3]])
plot(list.ts[[2]])
source('~/test.R')
length(b)
source('~/test.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
fix(acf.data)
source('~/test.R')
source('~/.active-rstudio-document')
names(acf.data)
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/.active-rstudio-document')
fix(maxes)
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
setwd("D:/work/dev/sonar/sonar/RelayControl/analytics")
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
getcwd()
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/times.import.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
source('D:/work/dev/sonar/sonar/RelayControl/analytics/period length.R')
