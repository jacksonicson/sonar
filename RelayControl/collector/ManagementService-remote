#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ManagementService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   queryLogs(LogsQuery query)'
  print '   query(TimeSeriesQuery query)'
  print '  string fetchSensor(string name)'
  print '  string sensorHash(string name)'
  print '  void deploySensor(string name, string file)'
  print '   getAllSensors()'
  print '  bool hasBinary(string sensor)'
  print '   getSensorLabels(string sensor)'
  print '  void delSensor(string sensor)'
  print '  void setSensorLabels(string sensor,  labels)'
  print '  void setSensorConfiguration(string sensor, SensorConfiguration configuration)'
  print '  SensorConfiguration getSensorConfiguration(string sensor)'
  print '   getSensorNames()'
  print '  void addHost(string hostname)'
  print '   getAllHosts()'
  print '  void delHost(string hostname)'
  print '  void setHostLabels(string hostname,  labels)'
  print '   getLabels(string hostname)'
  print '  void setSensor(string hostname, string sensor, bool activate)'
  print '   getSensors(string hostname)'
  print '  BundledSensorConfiguration getBundledSensorConfiguration(string sensor, string hostname)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ManagementService.Client(protocol)
transport.open()

if cmd == 'queryLogs':
  if len(args) != 1:
    print 'queryLogs requires 1 args'
    sys.exit(1)
  pp.pprint(client.queryLogs(eval(args[0]),))

elif cmd == 'query':
  if len(args) != 1:
    print 'query requires 1 args'
    sys.exit(1)
  pp.pprint(client.query(eval(args[0]),))

elif cmd == 'fetchSensor':
  if len(args) != 1:
    print 'fetchSensor requires 1 args'
    sys.exit(1)
  pp.pprint(client.fetchSensor(args[0],))

elif cmd == 'sensorHash':
  if len(args) != 1:
    print 'sensorHash requires 1 args'
    sys.exit(1)
  pp.pprint(client.sensorHash(args[0],))

elif cmd == 'deploySensor':
  if len(args) != 2:
    print 'deploySensor requires 2 args'
    sys.exit(1)
  pp.pprint(client.deploySensor(args[0],args[1],))

elif cmd == 'getAllSensors':
  if len(args) != 0:
    print 'getAllSensors requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllSensors())

elif cmd == 'hasBinary':
  if len(args) != 1:
    print 'hasBinary requires 1 args'
    sys.exit(1)
  pp.pprint(client.hasBinary(args[0],))

elif cmd == 'getSensorLabels':
  if len(args) != 1:
    print 'getSensorLabels requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSensorLabels(args[0],))

elif cmd == 'delSensor':
  if len(args) != 1:
    print 'delSensor requires 1 args'
    sys.exit(1)
  pp.pprint(client.delSensor(args[0],))

elif cmd == 'setSensorLabels':
  if len(args) != 2:
    print 'setSensorLabels requires 2 args'
    sys.exit(1)
  pp.pprint(client.setSensorLabels(args[0],eval(args[1]),))

elif cmd == 'setSensorConfiguration':
  if len(args) != 2:
    print 'setSensorConfiguration requires 2 args'
    sys.exit(1)
  pp.pprint(client.setSensorConfiguration(args[0],eval(args[1]),))

elif cmd == 'getSensorConfiguration':
  if len(args) != 1:
    print 'getSensorConfiguration requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSensorConfiguration(args[0],))

elif cmd == 'getSensorNames':
  if len(args) != 0:
    print 'getSensorNames requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSensorNames())

elif cmd == 'addHost':
  if len(args) != 1:
    print 'addHost requires 1 args'
    sys.exit(1)
  pp.pprint(client.addHost(args[0],))

elif cmd == 'getAllHosts':
  if len(args) != 0:
    print 'getAllHosts requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllHosts())

elif cmd == 'delHost':
  if len(args) != 1:
    print 'delHost requires 1 args'
    sys.exit(1)
  pp.pprint(client.delHost(args[0],))

elif cmd == 'setHostLabels':
  if len(args) != 2:
    print 'setHostLabels requires 2 args'
    sys.exit(1)
  pp.pprint(client.setHostLabels(args[0],eval(args[1]),))

elif cmd == 'getLabels':
  if len(args) != 1:
    print 'getLabels requires 1 args'
    sys.exit(1)
  pp.pprint(client.getLabels(args[0],))

elif cmd == 'setSensor':
  if len(args) != 3:
    print 'setSensor requires 3 args'
    sys.exit(1)
  pp.pprint(client.setSensor(args[0],args[1],eval(args[2]),))

elif cmd == 'getSensors':
  if len(args) != 1:
    print 'getSensors requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSensors(args[0],))

elif cmd == 'getBundledSensorConfiguration':
  if len(args) != 2:
    print 'getBundledSensorConfiguration requires 2 args'
    sys.exit(1)
  pp.pprint(client.getBundledSensorConfiguration(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
