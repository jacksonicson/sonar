#
# Autogenerated by Thrift Compiler (0.9.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Profile:
  """
  Attributes:
   - destTrackName
   - interval
   - transitionTime
   - numberOfUsers
   - mixName
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'destTrackName', None, None, ), # 1
    (2, TType.I64, 'interval', None, None, ), # 2
    (3, TType.I64, 'transitionTime', None, None, ), # 3
    (4, TType.I64, 'numberOfUsers', None, None, ), # 4
    (5, TType.STRING, 'mixName', None, None, ), # 5
    (6, TType.STRING, 'name', None, None, ), # 6
  )

  def __init__(self, destTrackName=None, interval=None, transitionTime=None, numberOfUsers=None, mixName=None, name=None,):
    self.destTrackName = destTrackName
    self.interval = interval
    self.transitionTime = transitionTime
    self.numberOfUsers = numberOfUsers
    self.mixName = mixName
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.destTrackName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.interval = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.transitionTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.numberOfUsers = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mixName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Profile')
    if self.destTrackName is not None:
      oprot.writeFieldBegin('destTrackName', TType.STRING, 1)
      oprot.writeString(self.destTrackName)
      oprot.writeFieldEnd()
    if self.interval is not None:
      oprot.writeFieldBegin('interval', TType.I64, 2)
      oprot.writeI64(self.interval)
      oprot.writeFieldEnd()
    if self.transitionTime is not None:
      oprot.writeFieldBegin('transitionTime', TType.I64, 3)
      oprot.writeI64(self.transitionTime)
      oprot.writeFieldEnd()
    if self.numberOfUsers is not None:
      oprot.writeFieldBegin('numberOfUsers', TType.I64, 4)
      oprot.writeI64(self.numberOfUsers)
      oprot.writeFieldEnd()
    if self.mixName is not None:
      oprot.writeFieldBegin('mixName', TType.STRING, 5)
      oprot.writeString(self.mixName)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 6)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
