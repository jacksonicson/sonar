/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.sonar.collector.tsdb.gen;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class CompactTimeseries implements org.apache.thrift.TBase<CompactTimeseries, CompactTimeseries._Fields>,
		java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"CompactTimeseries");

	private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"points", org.apache.thrift.protocol.TType.LIST, (short) 1);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new CompactTimeseriesStandardSchemeFactory());
		schemes.put(TupleScheme.class, new CompactTimeseriesTupleSchemeFactory());
	}

	public List<CompactPoint> points; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		POINTS((short) 1, "points");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // POINTS
				return POINTS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(
						org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT, CompactPoint.class))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompactTimeseries.class, metaDataMap);
	}

	public CompactTimeseries() {
	}

	public CompactTimeseries(List<CompactPoint> points) {
		this();
		this.points = points;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CompactTimeseries(CompactTimeseries other) {
		if (other.isSetPoints()) {
			List<CompactPoint> __this__points = new ArrayList<CompactPoint>();
			for (CompactPoint other_element : other.points) {
				__this__points.add(new CompactPoint(other_element));
			}
			this.points = __this__points;
		}
	}

	public CompactTimeseries deepCopy() {
		return new CompactTimeseries(this);
	}

	@Override
	public void clear() {
		this.points = null;
	}

	public int getPointsSize() {
		return (this.points == null) ? 0 : this.points.size();
	}

	public java.util.Iterator<CompactPoint> getPointsIterator() {
		return (this.points == null) ? null : this.points.iterator();
	}

	public void addToPoints(CompactPoint elem) {
		if (this.points == null) {
			this.points = new ArrayList<CompactPoint>();
		}
		this.points.add(elem);
	}

	public List<CompactPoint> getPoints() {
		return this.points;
	}

	public CompactTimeseries setPoints(List<CompactPoint> points) {
		this.points = points;
		return this;
	}

	public void unsetPoints() {
		this.points = null;
	}

	/**
	 * Returns true if field points is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPoints() {
		return this.points != null;
	}

	public void setPointsIsSet(boolean value) {
		if (!value) {
			this.points = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case POINTS:
			if (value == null) {
				unsetPoints();
			} else {
				setPoints((List<CompactPoint>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case POINTS:
			return getPoints();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case POINTS:
			return isSetPoints();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof CompactTimeseries)
			return this.equals((CompactTimeseries) that);
		return false;
	}

	public boolean equals(CompactTimeseries that) {
		if (that == null)
			return false;

		boolean this_present_points = true && this.isSetPoints();
		boolean that_present_points = true && that.isSetPoints();
		if (this_present_points || that_present_points) {
			if (!(this_present_points && that_present_points))
				return false;
			if (!this.points.equals(that.points))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(CompactTimeseries other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		CompactTimeseries typedOther = (CompactTimeseries) other;

		lastComparison = Boolean.valueOf(isSetPoints()).compareTo(typedOther.isSetPoints());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPoints()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, typedOther.points);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("CompactTimeseries(");
		boolean first = true;

		sb.append("points:");
		if (this.points == null) {
			sb.append("null");
		} else {
			sb.append(this.points);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
					out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class CompactTimeseriesStandardSchemeFactory implements SchemeFactory {
		public CompactTimeseriesStandardScheme getScheme() {
			return new CompactTimeseriesStandardScheme();
		}
	}

	private static class CompactTimeseriesStandardScheme extends StandardScheme<CompactTimeseries> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, CompactTimeseries struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // POINTS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.points = new ArrayList<CompactPoint>(_list0.size);
							for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
								CompactPoint _elem2; // required
								_elem2 = new CompactPoint();
								_elem2.read(iprot);
								struct.points.add(_elem2);
							}
							iprot.readListEnd();
						}
						struct.setPointsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, CompactTimeseries struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.points != null) {
				oprot.writeFieldBegin(POINTS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.points.size()));
					for (CompactPoint _iter3 : struct.points) {
						_iter3.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CompactTimeseriesTupleSchemeFactory implements SchemeFactory {
		public CompactTimeseriesTupleScheme getScheme() {
			return new CompactTimeseriesTupleScheme();
		}
	}

	private static class CompactTimeseriesTupleScheme extends TupleScheme<CompactTimeseries> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, CompactTimeseries struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetPoints()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetPoints()) {
				{
					oprot.writeI32(struct.points.size());
					for (CompactPoint _iter4 : struct.points) {
						_iter4.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, CompactTimeseries struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.points = new ArrayList<CompactPoint>(_list5.size);
					for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
						CompactPoint _elem7; // required
						_elem7 = new CompactPoint();
						_elem7.read(iprot);
						struct.points.add(_elem7);
					}
				}
				struct.setPointsIsSet(true);
			}
		}
	}

}
